interface BookInterface
{
    public function turnPage();
    public function open();
    public function getPage(): int;
}
class Book implements BookInterface
{
    private $page;

    public function open()
    {
        $this->page = 1;
    }
    public function turnPage()
    {
        $this->page++;
    }
    public function getPage(): int
    {
        return $this->page;
    }
}

//==============================================================================================================/

interface EBookInterface
{
    public function unlock();
    public function pressNext();
    public function getPage(): array;
}

class EBook implements EBookInterface
{
    private $page; 
    private $totalPages = 100;

    public function pressNext()
    {
        $this->page++;
    }
    public function unlock()
    {
	 $this->page = 1;
    }
    public function getPage(): array
    {
        return [$this->page, $this->totalPages];
    }
}

==EbookAdapter: pour ne pas changer le code de client lorsque on utilise "Book" ================================/
class EBookAdapter implements BookInterface
{

    protected $eBook;

    public function __construct(EBookInterface $eBook)
    {
        $this->eBook = $eBook;
    }

    public function open()
    {
        $this->eBook->unlock();
    }
    public function turnPage()
    {
        $this->eBook->pressNext();
    }
    public function getPage(): int
    {
        return $this->eBook->getPage()[0];
    }
}
/===================================exemple==================================================================/
$book = new Book();
$book->open();  //1
$book->turnPage();  //2

$eBook = new EBook();
$book = new EBookAdapter($eBook);
$book->open(); //1
$book->turnPage(); //2



