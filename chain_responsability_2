<?php
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;

abstract class Handler
{
	/**
	* @var Handler|null
	*/
	private $successor = null;

	public function __construct(Handler $handler = null)
	{
	 $this->successor = $handler;
	}

	/**
	* This approach by using a template method pattern ensures you that
	* each subclass will not forget to call the successor
	*
	* @param RequestInterface $request
	* * @return string|null
	*/
	final public function handle(RequestInterface $request)
	{
		 $processed = $this->processing($request);
		 if ($processed === null) {
			 if ($this->successor !== null) {
			   $processed = $this->successor->handle($request);
			 }
		 }

		 return $processed;
	 }

	 abstract protected function processing(RequestInterface $request);
}


use Psr\Http\Message\RequestInterface;

class HttpInMemoryCacheHandler extends Handler
{
	/**
	 * @var array
	*/
	
	private $data;
	
	/**
	* @param array $data
	* @param Handler|null $successor
	*/
	public function __construct(array $data, Handler $successor = null)
	{
	  parent::__construct($successor);
	  $this->data = $data;
	}

	/**
	* @param RequestInterface $request
	*
	* @return string|null
	*/
	protected function processing(RequestInterface $request)
	{
	 $key = sprintf(
	    '%s?%s', $request->getUri()->getPath(), $request->getUri()->getQuery() 
	 );

	 if ($request->getMethod() == 'GET' && isset($this->data[$key])) {
	  return $this->data[$key];
	 }

	 return null;
	}
}

////////////////////////////////////////TEST//////////////////////////////////////////////////////
class ChainTest extends TestCase
{

	/**
	 * @var Handler
	*/
	private $chain;

	protected function setUp()
	{
	  $this->chain = new HttpInMemoryCacheHandler( ['/foo/bar?index=1' => 'Hello In Memory!'], new SlowDatabaseHandler());
	}

	public function testCanRequestKeyInFastStorage()
	{
		 $uri = $this->createMock('Psr\Http\Message\UriInterface');
		 $uri->method('getPath')->willReturn('/foo/bar');
		 $uri->method('getQuery')->willReturn('index=1');

		 $request = $this->createMock('Psr\Http\Message\RequestInterface');
		 $request->method('getMethod')->willReturn('GET');
		 $request->method('getUri')->willReturn($uri);

		 $this->assertEquals('Hello In Memory!', $this->chain->handle($request));
	}

}
